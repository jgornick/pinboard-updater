#!/usr/bin/env node

const fs = require('fs')
const path = require('path')
const fetch = require('node-fetch')
const convert = require('xml-js')
const { map } = require('lodash')
const { loadFromString } = require('html-metadata')

const queryString = require('query-string')

const { PINBOARD_API_KEY } = process.env

async function getBookmarks () {
  const response = await fetch(`https://api.pinboard.in/v1/posts/all?auth_token=${PINBOARD_API_KEY}`)
  const responseText = await response.text()
  const responseXmlObject = convert.xml2js(responseText, { compact: true })
  const posts = responseXmlObject.posts.post

  return map(posts, '_attributes')
}

async function scrapeBookmark (bookmark) {
  const response = await fetch(bookmark.href)
  const html = await response.text()

  const metadata = await loadFromString(html)

  return {
    ...bookmark,
    description: metadata.general.title,
    extended: metadata.general.description,
  }
}

async function updateBookmark (bookmark) {
  const qs = queryString.stringify(
    {
      auth_token: PINBOARD_API_KEY,
      url: bookmark.href,
      description: bookmark.description,
      extended: bookmark.extended,
      tags: bookmark.tag,
      dt: bookmark.time,
      replace: 'yes',
      toread: bookmark.toread
    },
    {
      skipNull: true,
      skipEmptyString: true,
    }
  )

  await fetch(`https://api.pinboard.in/v1/posts/add?${qs}`)
}

async function main () {
  const bookmarks = await getBookmarks()
  const notFoundBookmarks = []

  let bookmark

  for (bookmark of bookmarks) {
    try {
      bookmark = await scrapeBookmark(bookmark)
      await updateBookmark(bookmark)
      await new Promise((resolve) => setTimeout(resolve, 100))
    } catch (e) {
      notFoundBookmarks.push({
        ...bookmark,
        error: e.message,
      })
    }
  }

  fs.writeFileSync(
    path.join(process.cwd(), 'not-found-bookmarks.json'),
    JSON.stringify(notFoundBookmarks, null, '  ')
  )
}


(async function() {
  await main()
}());
